
;********************
;* DSSI_TO_PHYSICAL *
;********************
;
; This macro expands to the operating system specific method of converting
; a virtual address in DS:SI to a physical address in EAX.
;

DSSI_TO_PHYSICAL macro

        push ebx
        xor eax,eax
        xor ebx,ebx
        mov ax,ds
        mov bx,si
        shl eax,4
        add eax,ebx
        pop ebx

        endm

;
; The following two macros are used to enable/disable interrupts at the
; adapter interrupt mask register.
;
ENABLE_ADAPTER_INTERRUPT MACRO
        push   eax
        push   dx
        mov    dx, p_CR7
        mov    eax, CR7_K_DEFAULT_ON
        out    dx, eax
        pop    dx
        pop    eax
        ENDM

DISABLE_ADAPTER_INTERRUPT MACRO
        push   eax
        push   dx

        mov    dx, p_CR7
        mov    eax, CR7_K_DEFAULT_OFF
        out    dx, eax

        pop    dx
        pop    eax

        ENDM

;**********
;
; ENTER_ISR
;
; This macro expands into the operating system specific preamble for the
; device ISR. For MS-DOS, a local stack is created.
; This macro is used in conjunction with the EXIT_ISR macro.
;
;**********

ENTER_ISR macro

;;
;; If this is MSDOS, save all general registers, and the segment registers
;;
        pushad                          ;; Save general regs on calling stack
        push    ds                      ;; Save the DS on the CALLING stack
        push    es                      ;; Save the ES on the CALLING stack

        mov     ax, cs                  ;; DS = CS
        mov     ds, ax

        endm

;**********
;
; EXIT_ISR
;
; This macro expands into the operating system specific exit code for the
; device ISR. For MS-DOS, the stack is restored, and a return from
; interrupt is issued. 
;
;**********

EXIT_ISR macro

;;
;; For MS-DOS, restore the stack, and issue an IRET
;;

        pop  es                 ;; Restore ES from the CALLING Stack
        pop  ds                 ;; Restore DS from the CALLING Stack

        popad                   ;; Restore general registers
        iret

        endm

;**********
;
; POP_REGISTERS
;
; This macro expands into code to restore the stack.  It is used for DOS
; interrupt sharing.  Note that the stack in use should be the one used by
; the caller.
;
;**********

POP_REGISTERS macro

        pop  es                 ;; Restore ES from the CALLING Stack
        pop  ds                 ;; Restore DS from the CALLING Stack

        popad                   ;; Restore general registers

        endm

SAVE_DOS_STACK  macro

        mov     cs:[save_int_ss], ss            ;; save the stack
        mov     cs:[save_int_sp], sp            ;; save the stack offset
        mov     ax, cs                          ;; SS = CS
        mov     ss, ax
        mov     sp, OFFSET our_stack              ;; set the local stack
        endm

RESTORE_DOS_STACK  macro

        mov  ss, cs:[save_int_ss]               ;; Restore calling stack
        mov  sp, cs:[save_int_sp]

        endm

;**********
;
; ACK_PIC_INTERRUPT
;
; This macro expands into the operating system specific code to acknowledge
; the PIC hardware interrupt. 
;
;**********

ACK_PIC_INTERRUPT macro
        LOCAL   ack_master

        mov     al, 20h                 ;; issue EOI to PIC(s), Non-specific EOI
        test    CS:PICAckSlave,0FFh
        jz      ack_master
        out     0A0h, al                ;; issue EOI to the slave PIC
ack_master:
        out     020h, al                ;; issue EOI to the master PIC

        endm
