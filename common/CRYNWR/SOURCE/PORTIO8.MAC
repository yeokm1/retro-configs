;
; Versions used for the PRINTER.
; In this case we DON'T wait for BUSY HIGH as a handshake.
;
strobe_cmd_4_printer      macro
        strobe_cmd_begin      ; Begin strobe for command
        strobe_cmd_end        ; Return to idle state
        endm


;; Write a value to the PEA command register.
;;      AL = value to write
;; Used for the PRINTER only.
;;
write_pea_cmd_register_4_printer macro
        mov     dx, cs:LPT_Address.datareg ; Data to write out
        out     dx, al
        strobe_cmd_4_printer
        endm

;; Clear the WFI bit to reset the Printer ACK indication
;; Call this before disable_ether
;;
CLEAR_WFI       MACRO
        mov     al, PEA_ENABLE_PRINTER AND (NOT WFI_STATE)
        write_pea_cmd_register_4_printer          ; do it
        ENDM



;; Write a value to the PEA command register.
;;      AL = value to write
;; Used for the 8005 only.
;;
write_pea_cmd_register macro
        mov     dx, cs:LPT_Address.datareg ; Data to write out
        out     dx, al                  ;
        strobe_cmd
        endm

strobe_cmd      macro
        LOCAL   P1
        strobe_cmd_begin                ; Begin strobe for command
        strobe_cmd_end                  ; Return to idle state
        dec     dx                      ; To status register
P1:
        in      al, dx                  ;
        test    al, BUSY_HIGH           ;
        jnz     P1                      ; Loop forever until done
        inc     dx                      ; set back to control reg
        endm

strobe_cmd_begin macro
        mov     dx, cs:LPT_Address.controlreg
        mov     al, PEA_CMD_STROBE_BEGIN
        out     dx, al
        endm

;
; Return the initialize and strobe bits on a write to the PEA Command
; Register to a known state.
; Reg DX = LPT control address
;
strobe_cmd_end macro
        mov     al, PEA_CMD_STROBE_END
        out     dx, al
        endm


;; Select the specified register on the 8005 for reading -
;;      On Entry: reg8005 = 8005 register (A0-A3)
;; Selects the 8005 register at which subsequent I/O is directed.
selectreg_read  macro   reg8005, bytesel
;####   mov     al, reg8005 OR bytesel OR SEL_READ_8005_REG
        mov     al, reg8005 OR bytesel
		or		al, CS:sel_rd_8005_reg
        mov     dx, cs:LPT_Address.datareg
        out     dx, al
        strobe_cmd
        endm

;; Select the specified register on the 8005 for reading -
;;      On Entry: AL = 8005 register (A0-A3)
;;                bytesel = 0 or 1 to select which byte of register.
;; Selects the 8005 register at which subsequent I/O is directed.
selectreg_read_al  macro   bytesel
;####   or      al, SEL_READ_8005_REG OR bytesel
        or      al, bytesel
        or      al, CS:sel_rd_8005_reg
        mov     dx, cs:LPT_Address.datareg
        out     dx, al
        strobe_cmd
        endm

;;
;; Strobe the data to read -
strobe_read_begin  macro
        mov     dx, cs:LPT_Address.controlreg
;####   mov     al, PEA_STROBE_READ_BEGIN
        mov     al, CS:pea_strobe_rd_begin
        out     dx, al
        endm


;;
;; Return the initialize and strobe bits on a read to a known state.
;;
strobe_read_end macro
        mov     dx, cs:LPT_Address.controlreg
;####   mov     al, PEA_STROBE_READ_END
        mov     al, CS:pea_strobe_rd_end
        out     dx, al
        endm

; This macro is called when we do I/O, since we need to guarantee
; that the data is available.
;
; Note: Using SLOW's does not appear to guarantee the time required for
;       the data to be valid.
;
; Wait for the acknowledge bit to indicate completion of an operation.
;
wait_ack        macro
        LOCAL   P1
        push    ax                      ; save ax
        mov     dx, CS:LPT_Address.statusreg
P1:
        in      al, dx                  ; Read value in
        test    al, PEA_ACK             ; operation complete?
        jnz     P1                      ; Check until done
        pop     ax                      ; Restore ax
        endm

;
; Wait for the acknowledge bit to go high to indicate that ACK has completed.
;
wait_ack_done      macro
        LOCAL   P1
        push    ax                      ; save ax
        mov     dx, CS:LPT_Address.statusreg
P1:
        in      al, dx                  ; Read value in
        test    al, PEA_ACK             ; operation complete?
        jz      P1                      ; Go until it happens
        pop     ax                      ; Restore ax
        endm

;; Write a byte to the 8005 via the LPT data port -
;;      On Entry -  AL = byte to write to LPT data port.
;;
;; We assume that the 8005 register has been selected.
;;
writebyte macro
        mov     dx, cs:LPT_Address.datareg    ;
        out     dx, al                  ; write the byte
        strobe_write
        endm

;
; Strobe the data for a write.
strobe_write    macro
        mov     dx, cs:LPT_Address.controlreg
        mov     al, PEA_STROBE_WRITE_BEGIN
        out     dx, al
        wait_ack               ; Wait for the ACK
; Return the initialize and strobe bits on a write to a known state.
        mov     dx, cs:LPT_Address.controlreg
        mov     al, PEA_STROBE_WRITE_END
        out     dx, al
        wait_ack_done			; Wait for ACK to go bye-bye
        endm

;-----------------------------------------------------------------
; Write out a sequence of bytes to the parallel port
; The 8005 register has already been selected.
; Registers used: ax, cx, dx
;------------------------------------------------------------------
OUTSTRG macro
        LOCAL   P1, P2
        JCXZ    P2
        mov     dx, cs:LPT_Address.datareg   ; Select LPT data port
; Write the next byte
P1:     lodsb                           ; get byte
        out     dx, al                  ; write the byte
; Strobe the write
        inc     dx                      ; To control port
        inc     dx                      ;
        mov     al, PEA_STROBE_WRITE_BEGIN
        out     dx, al
        wait_ack
        inc     dx                      ; To control port
; Return the initialize and strobe bits on a write to a known state.
        mov     al, PEA_STROBE_WRITE_END
        out     dx, al
        wait_ack_done
        dec     dx                      ; Get back to the data port
        loop    P1                      ; Write more bytes
P2:
        endm

;
; For the EEPROM
;
writebyte_eeprom macro
        mov     dx, cs:LPT_Address.datareg    ;
        out     dx, al                   ; write the byte (bit 0 is it!)
        strobe_write_eeprom
        endm

strobe_write_eeprom    macro
        push    ax                              ; Save AX register
        mov     dx, cs:LPT_Address.controlreg
        mov     al, PEA_STROBE_WRITE_BEGIN
        out     dx, al
;
; Return the initialize and strobe bits on a write to a known state.
;
        mov     dx, cs:LPT_Address.controlreg
        mov     al, PEA_STROBE_WRITE_END
        out     dx, al
        pop     ax
        endm

;; Get the next EEPROM bit.  Used while reading the EEPROM.
;; The LPT status port is read and the bit is returned in the paper empty bit-
;; which is bit 5.  This bit is then shifted into bit 0.
next_eeprom_bit macro
        strobe_read_begin               ; start strobe to read
        mov     dx, cs:LPT_Address.statusreg ;
        ; Read a few times to ensure that data is there
        in      al, dx                  ; read the byte
        in      al, dx                  ; read the byte
        in      al, dx                  ; read the byte
        mov     Input_Byte, al
        strobe_read_end                 ; return to known state
        mov     al, Input_Byte
        push    cx                      ; Save reg
        mov     cl, 5                   ; To allow 8086
        shr     al, cl                  ; Move into bit 0
        and     ax, 01h                 ; Leave bit 0 only, zero all others
        pop     cx                      ; Restore reg
        endm

strobe_cmd_disable      macro
        strobe_cmd_begin_disable                ; Begin strobe for command
        strobe_cmd_end_disable                  ; Return to idle state
        endm

strobe_cmd_begin_disable macro
        mov     dx, CS:LPT_Address.controlreg
        mov     al, CS:Saved_Control            ; Keep control bits
        and     al, 0DAh                        ; except the ones we need
        or      al, PEA_CMD_STROBE_BEGIN OR LPT_CTL_IRQENABLE
        out     dx, al
        endm

;
; Return the initialize and strobe bits on a write to the PEA Command
; Register to a known state.
; Reg DX = LPT control address
; REG AL = Contents from strobe_cmd_begin_disable
;
strobe_cmd_end_disable macro
        and     al, 0DAh                        ; Clear out dir, init, strobe
        or      al, PEA_CMD_STROBE_END OR LPT_CTL_IRQENABLE
        out     dx, al
        endm

;; Write a value to the PEA command register.
;;      AL = value to write
;;
write_pea_cmd_register_disable macro
        mov     dx, cs:LPT_Address.datareg ; Data to write out
        out     dx, al                  ;
        strobe_cmd_disable
        endm

