;****************************************************************************
; OEMSETNT.INF  - 3Com 3C589 EtherLink III LAN PC Card Windows NT Setup File
;----------------------------------------------------------------------------
; Revision History  
; %ver 1.0C
; 10/20/97 1.0a Release for Calvin 4.0 to support NDIS3/NDIS4 installation
; 10/30/97 1.0b Modified FilesToCopyList to NDIS3/NDIS4 sub-directory
; 02/20/98 1.0c Release for Calvin 4.01
;****************************************************************************

[Identification]
 OptionType = NetAdapter

[PlatformsSupported]
 ISA
; EISA
; MCA
; PCI
 PCMCIA
 "Jazz-Internal Bus"

[Options]
 el3c589

[OptionsTextENG]
 el3c589 = "3Com 3C589 EtherLink III LAN PC Card"

[AllFileConstants]
GenericInfVersion = " v1.00"
UtilityInf = "UTILITY.INF"
ParamInf = "NCPARAM.INF"
subroutineinf = "SUBROUTN.INF"
SoftwareType = "driver"
Exit_Code = 0
NetEventDLL = "%SystemRoot%\System32\netevent.dll"
IoLogMsgDLL = "%SystemRoot%\System32\IoLogMsg.dll"
;TrayIconExe = "comsmd.exe -try"
UninstallExe = "un3c589"
UnInstallName = "3Com PC Card Diagnostics Utilities"
Manufacturer = "3Com"



[FileConstants-el3c589]
GenericAdapterName = "3Com 3C589 EtherLink III LAN PC Card"
GenericDriverName = "3Com 3C589 EtherLink III LAN PC Card"
;GenericSysName = "EL589ND3.SYS"
GenericName = "el3c589"
ProductMajorVersion = "3"
ProductMinorVersion = "51"
ProductVersion = $(ProductMajorVersion)"."$(ProductMinorVersion)
ProductSoftwareName = "el3c589"
ProductSoftwareDescription = "3Com 3C589 EtherLink III LAN PC Card"
;ProductSoftwareImagePath = "\SystemRoot\System32\drivers\"$(GenericSysName)
NetRuleSoftwareType = "el3c589Sys ndisDriver el3c589Driver"
NetRuleSoftwareUse = $(SoftwareType)
NetRuleSoftwareBindForm = """el3c589Sys"" yes no container"
NetRuleSoftwareClass = {"el3c589Driver basic"}
NetRuleSoftwareBindable = {"el3c589Driver el3c589Adapter non exclusive 100"}
ProductHardwareName = "el3c589"
ProductHardwareDescription = "3Com 3C589 EtherLink III LAN PC Card"
NetRuleHardwareType = "el3c589 el3c589Adapter"
NetRuleHardwareBindForm = " yes yes container"
NetRuleHardwareClass = {"el3c589Adapter basic"}
ProductKeyName = $(!NTN_SoftwareBase)"\"$(Manufacturer)"\"$(ProductSoftwareName)"\CurrentVersion"
ParamKeyName = $(!NTN_ServiceBase)"\"$(ProductHardwareName)"\Parameters"
VERS1Manufacturer   = "3Com"
VERS1Product        = "EtherLink III LAN PC Card"
VERS1Type                   = "el3c589-EtherLink"
PCMCIA                      = 1



[GeneralConstants]
from = ""
to = ""
ExitCodeOk = 0
ExitCodeCancel = 1
ExitCodeFatal = 2
KeyNull = ""
MAXIMUM_ALLOWED = 33554432
RegistryErrorIndex = NO_ERROR
KeyProduct = ""
KeyParameters = ""
TRUE = 1
FALSE = 0
NoTitle = 0
ExitState = "Active"
OldVersionExisted = $(FALSE)
DriverPath = $(!STF_NTPATH)\drivers
NT350VersionConstant = "3.50"
NT310VersionConstant = "3.10"
NT400VersionConstant = "(4.0)"



[date]
 Now = {} ? $(!LIBHANDLE) GetSystemDate


[Identify]
 read-syms Identification

 set Status = STATUS_SUCCESSFUL
 set Identifier = $(OptionType)
 set Media = #("Source Media Descriptions", 1, 1)

 Return $(Status) $(Identifier) $(Media)


[ReturnOptions]
 set Status = STATUS_FAILED
 set OptionList = {}
 set OptionTextList = {}
 set LanguageList = ^(LanguagesSupported, 1)
 Ifcontains(i) $($0) in $(LanguageList)
 ifstr(i) $($1) == ""
 goto returnoptions
 endif

 set PlatformList = ^(PlatformsSupported, 1)
 Ifcontains(i) $($1) in $(PlatformList)
 goto returnoptions
 else
 set Status = STATUS_NOTSUPPORTED
 goto finish_ReturnOptions
 endif
 else
 set Status = STATUS_NOLANGUAGE
 goto finish_ReturnOptions
 endif

returnoptions = +
 set OptionList = ^(Options, 1)
 set OptionTextList = ^(OptionsText$($0), 1)
 set Status = STATUS_SUCCESSFUL

finish_ReturnOptions = +
 Return $(Status) $(OptionList) $(OptionTextList)

[InstallOption]
 set Status = STATUS_FAILED
 set Option = $($1)
 set SrcDir = $($2)
 set AddCopy = $($3)
 set DoCopy = $($4)
 set DoConfig = $($5)

 Set !DebugOutputControl = 1

 set LanguageList = ^(LanguagesSupported, 1)
 Ifcontains(i) $($0) NOT-IN $(LanguageList)
 Return STATUS_NOLANGUAGE
 endif

 set-subst LF = "\n"

 read-syms GeneralConstants
	read-syms AllFileConstants
 read-syms FileConstants"-"$(Option)
 read-syms DialogConstants$(!STF_LANGUAGE)"-"$(Option)
 ifstr(i) $(!NTN_Origination) == "NCPA"
 set Continue = $(OK)
 endif

 read-syms AllFileConstants$(!STF_LANGUAGE)
 read-syms FileConstants$(!STF_LANGUAGE)"-"$(Option)

 detect date

 set-title $(FunctionTitle)

 set to = Begin
 set from = Begin
 set CommonStatus = STATUS_SUCCESSFUL

 EndWait

Begin = +

 set CurrentVersionValue = ""
 OpenRegKey $(!REG_H_LOCAL) "" "SOFTWARE\Microsoft\Windows Nt\CurrentVersion" $(!REG_KEY_READ) KeyNt
 Ifstr(i) $(KeyNt) != ""
  GetRegValue $(KeyNt) "CurrentVersion" CurrentVersionValue
  Debug-Output "$(InfFile) $(Option): WinNT CurrentVersion ="$(CurrentVersionValue)
  CloseRegKey $(KeyNt)
 Endif

 ;;  NT v4.00 has NDIS4
 ifstr(i) (*($(CurrentVersionValue),4)) == $(NT400VersionConstant)
     set NDIS_DISK_A = NDIS3_4	
     set NDIS_VER = NDIS4
     set ProductSoftwareImagePath = "\SystemRoot\System32\drivers\EL589ND4.SYS"
 else
     set NDIS_DISK_A = NDIS3_4	
     set NDIS_VER = NDIS3
     set ProductSoftwareImagePath = "\SystemRoot\System32\drivers\EL589ND3.SYS"
 endif

 ifstr(i) (*($(CurrentVersionValue),4)) == $(NT310VersionConstant)
  Debug-Output "$(InfFile) $(Option): Configureadapter"
  set Error = "Windows NT v3.10 is not support by this product"
  goto fatal
 endif


 Set ActivateDetection = FALSE

 Ifstr(i) $(!NTN_InstallMode) == deinstall
  set StartLabel = removeadapter
 else-Ifstr(i) $(!NTN_InstallMode) == Update
  set StartLabel = UpgradeSoftware
 else-Ifstr(i) $(!NTN_InstallMode) == bind
  set StartLabel = bindingadapter
 else-Ifstr(i) $(!NTN_InstallMode) == configure
  set StartLabel = configureadapter
  Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
   Shell $(UtilityInf),RegistryErrorString,CANNOT_CONFIGURE_SOFTWARE
   ifint $($ShellCode) != $(!SHELL_CODE_OK)
    Debug-Output "ShellCode error: cannot get an error string."
    goto ShellCodeError
   endif
   set Error = $($R0)
   set from = end
   set to = end
   goto nonfatalinfo
  endif
 else
  set StartLabel = installadapter
  set OEM_ABANDON_OPTIONS = {}
  set OEM_ABANDON_SOFTWARE = FALSE
  set OEM_ABANDON_ON = TRUE
 endif


 set IRQValue           = *($(IRQList), 5)
 set IOBaseAddrValue    = *($(IOBaseAddrList), 1)

 Set from = $(fatal)
 Set to = $(fatal)
 Goto $(StartLabel)


installadapter = +
 OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct

 Ifstr $(KeyProduct) != $(KeyNull)
  CloseRegKey $(KeyProduct)

  ifstr(i) !(NTN_RegBase) == $(ProductKeyName)
   Shell $(UtilityInf), VerExistedDlg, $(ProductSoftwareTitle),+
	 $(ProductVersion)
   ifint $($ShellCode) != $(!SHELL_CODE_OK)
    Debug-Output "ShellCode error: cannot get an error string."
    goto ShellCodeError
   endif

   goto end
  else
   Shell $(UtilityInf), CardExistedDlg

   ifint $($ShellCode) != $(!SHELL_CODE_OK)
    Debug-Output "ShellCode error: cannot get an error string."
    goto ShellCodeError
   endif

   ifstr(i) $($R1) != "OK"
    goto end
   endif
   set OldVersionExisted = $(TRUE)
  endif
 endif

 Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) NO

 Ifint $($ShellCode) != $(!SHELL_CODE_OK)
  Goto ShellCodeError
 Else-Ifstr(i) $($R0) == STATUS_FAILED
  Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
  ifint $($ShellCode) != $(!SHELL_CODE_OK)
   goto ShellCodeError
  endif
  set Error = $($R0)
  Goto fatal
 Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
  Goto successful
 Endif

 Set FileToCheck = $($R1)\OEMSETNT.INF
 LibraryProcedure FilePresent,$(!LIBHANDLE), CheckFileExistance $(FileToCheck)
 Ifstr(i) $(FilePresent) != "YES"
     Goto installadapter
 Endif

 Set SrcDir = $($R1)
 install "Install-Dll"

 Debug-Output "Install-3nicdiag"
 install "Install-3nicdiag"

 StartWait
  ifstr(i) (*($(CurrentVersionValue),4)) == $(NT400VersionConstant)
   Debug-Output "$(InfFile) $(Option): Windows NT 4.00"
;;   OpenRegKey $(!REG_H_LOCAL) "" "SOFTWARE\Microsoft\Windows\CurrentVersion\Run" $(!REG_KEY_ALL_ACCESS) KeyNt
;;   set TrayIconList = {COMSMDEXE,$(NoTitle),$(!REG_VT_SZ),$(TrayIconExe)}
;;   SetRegValue $(KeyNt) $(TrayIconList)
;;   Debug-Output "Install-TraynCpl"
;;   install "Install-TrayAndCpl"
;;   CloseRegKey $(KeyNt)
;;   RunProgram ExitCode "Windows Directory" "" COMSMD.EXE "-setup"

   OpenRegKey $(!REG_H_LOCAL) "" "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" $(!REG_KEY_ALL_ACCESS) KeyNt
   ifstr $(KeyNt) == ""
     CreateRegKey $(!REG_H_LOCAL) {"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" , 0, GenericClass} "" $(!REG_KEY_ALL_ACCESS) "" KeyNt
   endif
   OpenRegKey $(KeyNt) "" "3ComNicUnInstall" $(!REG_KEY_ALL_ACCESS) KeyNt2
   ifstr $(KeyNt2) == ""
    CreateRegKey $(KeyNt) {"3ComNicUnInstall" , 0, GenericClass} "" $(!REG_KEY_ALL_ACCESS) "" KeyNt2
   endif
   set NewValueList = {{DisplayName, $(NoTitle), $(!REG_VT_SZ), "3Com PC Card Diagnostics"},+
		      {UninstallString, $(NoTitle), $(!REG_VT_SZ), "UN3C589.EXE"}}
   Shell $(UtilityInf), AddValueList, $(KeyNt2), $(NewValueList)
   ifint $($ShellCode) != $(!SHELL_CODE_OK)
    goto ShellCodeError
   endif
   CloseRegKey $(KeyNt)
   CloseRegKey $(KeyNt2)
  endif
 EndWait

 goto adaptersetup


configureadapter = +
 Ifstr $(KeyProduct) == $(KeyNull)
 OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) $(MAXIMUM_ALLOWED) KeyProduct
 Ifstr $(KeyProduct) == $(KeyNull)
 set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
 Debug-Output "Cannot find component product key"
 goto fatalregistry
 Endif
 Endif

 Debug-Output "INF: Shelling to FindService"
 Shell $(UtilityInf) FindService, $(KeyProduct)
 Ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "INF: FindService shell failure"
 Goto ShellCodeError
 Endif
 Ifstr(i) $($R0) != NO_ERROR
 Debug-Output "INF: FindService Shell error: "$($R0)
 Goto fatalregistry
 endif

 Set KeyParameters = $($R2)

 CloseRegKey $($R1)

 Ifstr $(KeyParameters) == $(KeyNull)
 set RegistryErrorIndex = CANNOT_FIND_COMPONENT_SERVICE
 Debug-Output "Cannot find component service"
 goto fatalregistry
 endif

 set OldVersionExisted = $(TRUE)

 set ValueName = ""
 set ValueData = ""
 set ValueStr = ""
 set ValueList = {}


	EnumRegValue $(KeyParameters) ValueList
 ForListDo $(ValueList)
		set ValueItem = $($)
		set ValueName = *($(ValueItem),1)
		set ValueData = *($(ValueItem),4)
		ifstr(i) $(ValueName) == "IoBaseAddress"
		 set IOBaseAddrIndex = $(ValueData)
	 else-ifstr(i) $(ValueName) == "InterruptNumber"
		 set IRQValueIndex = $(ValueData)
		endif
 EndForListDo

 set IRQValue = *($(IRQList), ~($(IRQValues),$(IRQValueIndex)))
 ifstr(i) $(IRQValue) == ""
		set IRQValue = *($(IRQList), 5)
 endif

 set IOBaseAddrValue = *($(IOBaseAddrList), ~($(IOBaseAddrValues),$(IOBaseAddrIndex)))
 ifstr(i) $(IOBaseAddrValue) == ""
		set IOBaseAddrValue = *($(IOBaseAddrList), 1)
 endif


adaptersetup = +



 LoadLibrary "disk 1" $(DialogDllName) hLib
 read-syms FileDependentDlg$(!STF_LANGUAGE)"-"$(Option)
	set ENABLER = 0


 ui start "InputDlg" $(hLib)

 set ExitButton = $(ButtonPressed)
	FreeLibrary $(hLib)

	ifstr(i) $(DLGEVENT) == "CONTINUE"

		set IOBaseAddrIndex             = $(Combo1Out)
		set IRQValueIndex               = $(Combo2Out)
	set ExitButton                  = $(ButtonPressed)

		ui pop 1

	else-ifstr(i) $(DLGEVENT) == "EXIT"
		set CommonStatus = STATUS_USERCANCEL
		ui pop 1
		goto end
 else
		set CommonStatus = STATUS_USERCANCEL
		ui pop 1
		Debug-Output "Action: unknown. Bye."
		goto end
 endif


skipoptions =+

 ifint $(OldVersionExisted) == $(TRUE)
 ifstr(i) $(!NTN_InstallMode) == configure
 goto writeparameters
 endif
 endif
 StartWait
 ifint $(OldVersionExisted) == $(FALSE)

 ifstr(i) $(!NTN_InstallMode) == "install"
 Ifstr(i) $(DoCopy) == "YES"

 Shell $(UtilityInf), DoAskSource, $(!STF_CWDDIR), $(SrcDir) YES

 Ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Goto ShellCodeError
 Else-Ifstr(i) $($R0) == STATUS_FAILED
 Shell $(UtilityInf) RegistryErrorString "ASK_SOURCE_FAIL"
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 goto ShellCodeError
 endif
 set Error = $($R0)
 Goto fatal
 Else-Ifstr(i) $($R0) == STATUS_USERCANCEL
 Goto successful
 Endif

 Set SrcDir = $($R1)

 Endif

 install "Install-Option"

 ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
 Shell $(UtilityInf) RegistryErrorString "UNABLE_COPY_FILE"
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 goto ShellCodeError
 endif
 set Error = $($R0)
 goto fatal
 endif
 endif



 Shell $(UtilityInf), AddSoftwareComponent, $(Manufacturer), +
 $(ProductSoftwareName), +
 $(ProductSoftwareName), +
 $(ProductSoftwareTitle), $(STF_CONTEXTINFNAME), +
 $(ProductSoftwareImagePath), "kernel", "NDIS", {}, "",+
 $(NetEventDLL)

 Set OEM_ABANDON_SOFTWARE = TRUE

 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error"
 goto ShellCodeError
 endif
 set RegistryErrorIndex = $($R0)
 set KeyProduct = $($R1)
 Set SoftNetRulesKey = $($R2)
 CloseRegKey $($R3)
 CloseRegKey $($R4)
 CloseRegKey $($R5)

 Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
 EndWait
 Debug-Output "Registry error: add software components"
 CloseRegKey $(KeyProduct)
 CloseRegKey $(SoftNetRulesKey)
 goto fatalregistry
 endif

 set NewValueList = {{SoftwareType,$(NoTitle),$(!REG_VT_SZ),$(SoftwareType)},+
 {MajorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMajorVersion)},+
 {MinorVersion,$(NoTitle),$(!REG_VT_DWORD),$(ProductMinorVersion)},+
 {Title,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareTitle)},+
 {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareDescription)},+
 {ServiceName,$(NoTitle),$(!REG_VT_SZ),$(ProductSoftwareName)},+
 {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}

 Shell $(UtilityInf), AddValueList, $(KeyProduct), $(NewValueList)
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error."
 goto ShellCodeError
 endif

 set RegistryErrorIndex = $($R0)

 Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
 EndWait
 Debug-Output "Registry error: add value list."
 CloseRegKey $(KeyProduct)
 CloseRegKey $(SoftNetRulesKey)
 goto fatalregistry
 endif

 set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareType)},+
 {use,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareUse)}, +
 {bindform,$(NoTitle),$(!REG_VT_SZ),$(NetRuleSoftwareBindForm)}, +
 {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareClass)}, +
 {bindable,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleSoftwareBindable)}, +
 {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}

 Shell $(UtilityInf), AddValueList, $(SoftNetRulesKey), $(NewValueList)
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error."
 goto ShellCodeError
 endif

 set RegistryErrorIndex = $($R0)

 CloseRegKey $(KeyProduct)
 CloseRegKey $(SoftNetRulesKey)

 Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
 EndWait
 Debug-Output "Resgitry error: add value list."
 goto fatalregistry
 endif
 endif

 Shell $(UtilityInf), AddHardwareComponent, $(ProductHardwareName),$(STF_CONTEXTINFNAME),$(ProductKeyName)

 ifint $($R4) != -1
 Set OEM_ABANDON_OPTIONS = >($(OEM_ABANDON_OPTIONS), $(!NTN_SoftwareBase)"\Microsoft\Windows NT\CurrentVersion\NetworkCards\"$($R4))
 endif

 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "Cannot add hardware component"
 goto ShellCodeError
 endif

 set RegistryErrorIndex = $($R0)

 Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
 EndWait
 Debug-Output "Registry error: add hardware component"
 CloseRegKey $($R1)
 CloseRegKey $($R2)
 CloseRegKey $($R3)
 goto fatalregistry
 endif

 set KeyParameters = $($R3)
 set KeyAdapterRules = $($R2)
 set AdapterNumber = $($R4)

 set NewValueList = {{Manufacturer,$(NoTitle),$(!REG_VT_SZ),$(Manufacturer)},+
 {Title,$(NoTitle),$(!REG_VT_SZ),"["$($R4)"] "$(ProductHardwareTitle)},+
 {Description,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareDescription)},+
 {ProductName,$(NoTitle),$(!REG_VT_SZ),$(ProductHardwareName)},+
 {ServiceName,$(NoTitle),$(!REG_VT_SZ),$($R5)},+
 {InstallDate,$(NoTitle),$(!REG_VT_DWORD),*($(Now),1)}}

 Shell $(UtilityInf), AddValueList, $($R1), $(NewValueList)
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error"
 goto ShellCodeError
 endif

 CloseRegKey $($R1)

 set TempProdName = """"$(ProductHardwareName)$(AdapterNumber)""""
 set TempBindForm = $(TempProdName)$(NetRuleHardwareBindForm)

 set NewValueList = {{type,$(NoTitle),$(!REG_VT_SZ),$(NetRuleHardwareType)},+
 {bindform,$(NoTitle),$(!REG_VT_SZ),$(TempBindForm)}, +
 {class,$(NoTitle),$(!REG_VT_MULTI_SZ),$(NetRuleHardwareClass)}, +
 {InfOption,$(NoTitle),$(!REG_VT_SZ),$(Option)}}

 Shell $(UtilityInf), AddValueList, $(KeyAdapterRules), $(NewValueList)
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error."
 goto ShellCodeError
 endif

 set RegistryErrorIndex = $($R0)

 Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
 EndWait
 Debug-Output "Resgitry error: add value list."
 CloseRegKey $(KeyParameters)
 CloseRegKey $(KeyAdapterRules)
 goto fatalregistry
 endif

 CloseRegKey $(KeyAdapterRules)

 goto writeparameters

writeparameters = +


set BusTypeNum = 1
ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error."
 goto ShellCodeError
 endif
;
; For 3C589 card
;
    Debug-Output "$(InfFile) $(Option): Write Pcmcia database"
    OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\Pcmcia\DataBase\3Com Corporation\3C589D" $(MAXIMUM_ALLOWED) MyPcmciaHandle
    Ifstr $(MyPcmciaHandle) == $(KeyNull)
	Debug-Output "CreatRegKey (3C589D)"
	OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\Pcmcia\DataBase\3Com Corporation" $(MAXIMUM_ALLOWED) MyPcmciaHandle
	Ifstr $(MyPcmciaHandle) == $(KeyNull)
	    OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\Pcmcia\DataBase" $(MAXIMUM_ALLOWED) MyPcmciaKey
	    CreateRegKey $(MyPcmciaKey) {"3Com Corporation",0,GenericClass} "" $(MAXIMUM_ALLOWED) "" MyPcmcialHandle
	    CloseRegKey ($MyPcmciaKey)
	endif
	OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\Pcmcia\DataBase\3Com Corporation" $(MAXIMUM_ALLOWED) MyPcmciaKey
	CreateRegKey $(MyPcmciaKey) {"3C589D",0,GenericClass} "" $(MAXIMUM_ALLOWED) "" MyPcmcialHandle
	CloseRegKey ($MyPcmciaKey)
	OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\Pcmcia\DataBase\3Com Corporation\3C589D" $(MAXIMUM_ALLOWED) MyPcmciaHandle
    endif
    set NewValueList = {{Driver,$(NoTitle),$(!REG_VT_SZ),"el3c589"}}
    Shell $(UtilityInf), AddValueList, $(MyPcmciaHandle), $(NewValueList)
    Debug-Output "<DBG> AddValueList - Driver:REG_SZ:el3c589"
    CloseRegKey $(MyPcmciaHandle)
;
; For 3C589A, 3C589B, and 3C589C cards
;
    Debug-Output "$(InfFile) $(Option): Write Pcmcia database"
    OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\Pcmcia\DataBase\3Com Corporation\3C589" $(MAXIMUM_ALLOWED) MyPcmciaHandle
    Ifstr $(MyPcmciaHandle) == $(KeyNull)
	Debug-Output "CreatRegKey (3C589)"
	OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\Pcmcia\DataBase\3Com Corporation" $(MAXIMUM_ALLOWED) MyPcmciaHandle
	Ifstr $(MyPcmciaHandle) == $(KeyNull)
	    OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\Pcmcia\DataBase" $(MAXIMUM_ALLOWED) MyPcmciaKey
	    CreateRegKey $(MyPcmciaKey) {"3Com Corporation",0,GenericClass} "" $(MAXIMUM_ALLOWED) "" MyPcmcialHandle
	    CloseRegKey ($MyPcmciaKey)
	endif
	OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\Pcmcia\DataBase\3Com Corporation" $(MAXIMUM_ALLOWED) MyPcmciaKey
	CreateRegKey $(MyPcmciaKey) {"3C589",0,GenericClass} "" $(MAXIMUM_ALLOWED) "" MyPcmcialHandle
	CloseRegKey ($MyPcmciaKey)
	OpenRegKey $(!REG_H_LOCAL) "" "SYSTEM\CurrentControlSet\Services\Pcmcia\DataBase\3Com Corporation\3C589" $(MAXIMUM_ALLOWED) MyPcmciaHandle
    endif

    set NewValueList = {{Driver,$(NoTitle),$(!REG_VT_SZ),"el3c589"}}
    Shell $(UtilityInf), AddValueList, $(MyPcmciaHandle), $(NewValueList)
    Debug-Output "<DBG> AddValueList - Driver:REG_SZ:el3c589"
    CloseRegKey $(MyPcmciaHandle)

    set IRQValue           = *($(IRQValues), ~($(IRQList), $(IRQValueIndex)))
    set IOBaseAddrValue    = *($(IOBaseAddrValues),~($(IOBaseAddrList), $(IOBaseAddrIndex)))
    set NewValueList = {{IoBaseAddress, $(NoTitle),$(!REG_VT_DWORD),$(IOBaseAddrValue)},+
	 {InterruptNumber, $(NoTitle),$(!REG_VT_DWORD),$(IRQValue)},+
	 {MediaType, $(NoTitle),$(!REG_VT_DWORD),1},+
	 {BusType, $(NoTitle),$(!REG_VT_DWORD),$(BusTypeNum)},+
	 {BusNumber, $(NoTitle),$(!REG_VT_DWORD),0},+
	 {CardType,$(NoTitle),$(!REG_VT_DWORD),0},+
	 {AdapterType,                    $(NoTitle),$(!REG_VT_DWORD),259},+
	 {OSType,                         $(NoTitle),$(!REG_VT_DWORD),1},+
	 {Pcmcia, $(NoTitle),$(!REG_VT_DWORD),1}}


 Shell $(UtilityInf), AddValueList, $(KeyParameters), $(NewValueList)
 CloseRegKey $(KeyParameters)



 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error."
 goto ShellCodeError
 endif

 set RegistryErrorIndex = $($R0)

 Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
 Debug-Output "Registry error: Add value list"
 goto fatalregistry
 endif

 EndWait

 goto successful

bindingadapter =+
 set Error = "Binding: Sorry, not yet implemented."
 goto fatal


removeadapter = +
 Ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)

Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
 $(ProductSoftwareName)
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error"
 goto ShellCodeError
 endif

 set RegistryErrorIndex = $($R0)

 Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
 goto fatalregistry
 endif
 else
 Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
 $(ProductSoftwareName), $(!NTN_RegBase)
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error"
 goto ShellCodeError
 endif

 set RegistryErrorIndex = $($R0)

 Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
 goto fatalregistry
 endif


 endif


	ifstr(i) (*($(CurrentVersionValue),4)) == $(NT400VersionConstant)
		Debug-Output "$(InfFile) $(Option): Windows NT 4.00 remove icon"
		OpenRegKey $(!REG_H_LOCAL) "" "SOFTWARE\Microsoft\Windows\CurrentVersion\Run" $(!REG_KEY_ALL_ACCESS) KeyNt
		set TrayIconList = COMSMDEXE
		DeleteRegValue $(KeyNt) $(TrayIconList)
		CloseRegKey $(KeyNt)
	endif

	RunProgram ExitCode "Windows Directory" "" UN3C589.EXE "-inf"

goto end


UpgradeSoftware = +
 ifstr(i) $(ProductKeyName) == $(!NTN_RegBase)
 OpenRegKey $(!REG_H_LOCAL) "" $(ProductKeyName) $(MAXIMUM_ALLOWED) KeyProduct

 Ifstr $(KeyProduct) != $(KeyNull)
 GetRegValue $(KeyProduct),"MajorVersion", VersionInfo
 set Version = *($(VersionInfo), 4)

 Shell $(UtilityInf), GetInfFileNameFromRegistry, $(KeyProduct)

 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error"
 goto ShellCodeError
 endif

 set !UG_Filename = $($R0)

 ifstr(i) $(!UG_Filename) != ""
 install "Install-Update"
 ifstr(i) $(STF_INSTALL_OUTCOME) != STF_SUCCESS
 goto fatal
 endif
 endif

 SetRegValue $(KeyProduct) {MajorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMajorVersion)}
 SetRegValue $(KeyProduct) {MinorVersion,$(NoTitle),$(!REG_VT_SZ),$(ProductMinorVersion)}

 ifint $(Version) != $(ProductVersion)
 endif
 CloseRegKey $(KeyProduct)
 else
 goto fatalregistry
 endif
 else
 OpenRegKey $(!REG_H_LOCAL) "" $(!NTN_RegBase) +
 $(MAXIMUM_ALLOWED) NetworkCardKey
 Ifstr(i) $(NetworkCardKey) != $(KeyNull)
 GetRegValue $(NetworkCardKey),"ServiceName", ServiceNameInfo
 set ServiceName = *($(ServiceNameInfo), 4)

 OpenRegKey $(NetworkCardKey) "" "NetRules" +
 $(MAXIMUM_ALLOWED) NetRuleKey
 Ifstr(i) $(NetRuleKey) != $(KeyNull)
 else
 goto fatalregistry
 endif

 CloseRegKey $(NetRules)
 CloseRegKey $(NetworkCardKey)
 else
 goto fatalregistry
 endif
 OpenRegKey $(!REG_H_LOCAL) "" +
 $(!NTN_ServiceBase)"\"$(ServiceName) +
 $(MAXIMUM_ALLOWED) ServiceKey

 Ifstr(i) $(ServiceKey) != $(KeyNull)
 CloseRegKey $(ServiceKey)
 else
 goto fatalregistry
 endif
 endif

 goto end

successful = +
 goto end

abandon = +
 ForListDo $(OEM_ABANDON_OPTIONS)
 Shell $(UtilityInf), RemoveHardwareComponent, $(Manufacturer), +
 $(ProductSoftwareName), $($)
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error"
 goto ShellCodeError
 endif

 set RegistryErrorIndex = $($R0)

 Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
 goto fatalregistry
 endif
 EndForListDo

 Ifstr(i) $(OEM_ABANDON_SOFTWARE) == TRUE

Shell $(UtilityInf), RemoveSoftwareComponent, $(Manufacturer), +
 $(ProductSoftwareName), FALSE
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error"
 goto ShellCodeError
 endif

 set RegistryErrorIndex = $($R0)

 Ifstr(i) $(RegistryErrorIndex) != NO_ERROR
 goto fatalregistry
 endif
 endif

 goto end

warning = +
 Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "WARNING", $(Error)
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 goto ShellCodeError
 endif
 ifstr(i) $($R1) == "OK"
 goto $(to)
 else-ifstr(i) $($R1) == "CANCEL"
 goto $(from)
 else
 goto "end"
 endif
nonfatalinfo = +
 Set Severity = STATUS
 Set CommonStatus = STATUS_USERCANCEL
 goto nonfatalmsg
nonfatal = +
 Set Severity = NONFATAL
 goto nonfatalmsg
nonfatalmsg = +
 ifstr(i) $(Error) == ""
 Set Severity = NONFATAL
 Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 goto ShellCodeError
 endif
 set Error = $($R0)
 endif
 Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), $(Severity), $(Error)
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 goto ShellCodeError
 endif
 ifstr(i) $($R1) == "OK"
 goto $(from)
 else
 goto "end"
 endif

fatalregistry = +
 Shell $(UtilityInf) RegistryErrorString $(RegistryErrorIndex)
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 goto ShellCodeError
 endif
 set Error = $($R0)
 goto fatal
fataldetect = +
 Shell $(UtilityInf),RegistryErrorString,CANNOT_DETECT
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 Debug-Output "ShellCode error: cannot get an error string."
 goto ShellCodeError
 endif
 set Error = $($R0)
 Goto fatal
fatal = +
 ifstr(i) $(Error) == ""
 Shell $(UtilityInf) RegistryErrorString "SETUP_FAIL"
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 goto ShellCodeError
 endif
 set Error = $($R0)
 endif
 Shell $(subroutineinf) SetupMessage, $(!STF_LANGUAGE), "FATAL", $(Error)
 ifint $($ShellCode) != $(!SHELL_CODE_OK)
 goto ShellCodeError
 endif

 goto setfailed

ShellCodeError = +
 set DlgType = "MessageBox"
 set STF_MB_TITLE = $(ShellCodeErrorTitle)
 set STF_MB_TEXT = $(ShellCodeErrorText)
 set STF_MB_TYPE = 1
 set STF_MB_ICON = 3
 set STF_MB_DEF = 1
 ui start "Error Message"
 goto setfailed

setfailed = +
 set CommonStatus = STATUS_FAILED
 ifstr(i) $(OEM_ABANDON_ON) == TRUE
 set OEM_ABANDON_ON = FALSE
 goto abandon
 endif
 goto end

end = +
 goto term

term = +

 Return $(CommonStatus)


[DebugConfiguration]
 Set InfName = "OEMSETNT.INF"
return


[Install-Option]
 set STF_VITAL = ""

 ifstr(i) $(AddCopy) == "YES"

; AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
  AddSectionFilesToCopyList Files-NDIS3_4 $(SrcDir)ndis3_4 $(!STF_WINDOWSSYSPATH)\drivers
 endif

 ifstr(i) $(DoCopy) == "YES"
 set !STF_NCPA_FLUSH_COPYLIST = TRUE
 CopyFilesInCopyList
 endif

 Exit


[Install-Update]
 set STF_VITAL = ""
 set STF_OVERWRITE = "VERIFYSOURCEOLDER"

 AddSectionFilesToCopyList Files-3nicdiag $(SrcDir)ndis3_4 $(!STF_WINDOWSSYSPATH)
;; AddSectionFilesToCopyList Files-HwDll $(SrcDir)WINNT $(!STF_WINDOWSSYSPATH)
;AddSectionFilesToCopyList Files-$(Option) $(SrcDir) $(!STF_WINDOWSSYSPATH)\drivers
 AddSectionFilesToCopyList Files-NDIS3_4 $(SrcDir)ndis3_4 $(!STF_WINDOWSSYSPATH)\drivers
 AddSectionFilesToCopyList Files-Inf $(SrcDir) $(!STF_WINDOWSSYSPATH)

 set !STF_NCPA_FLUSH_COPYLIST = TRUE
 CopyFilesInCopyList

 exit



[Install-Dll]
 set STF_VITAL  = ""
 AddSectionFilesToCopyList Files-Dll $(SrcDir) $(!STF_WINDOWSSYSPATH)
 set !STF_NCPA_FLUSH_COPYLIST = TRUE
 CopyFilesInCopyList
 exit

[Install-3nicdiag]
 set STF_VITAL = ""
 AddSectionFilesToCopyList Files-3nicdiag $(SrcDir)ndis3_4 $(!STF_WINDOWSSYSPATH)
;; AddSectionFilesToCopyList Files-HwDll $(SrcDir)WINNT $(!STF_WINDOWSSYSPATH)
 set !STF_NCPA_FLUSH_COPYLIST = TRUE
 CopyFilesInCopyList
 Exit

;;[Install-TrayAndCpl]
;; set STF_VITAL = ""
;; AddSectionFilesToCopyList Files-TrayAndCpl $(SrcDir)win32 $(!STF_WINDOWSSYSPATH)
;; set !STF_NCPA_FLUSH_COPYLIST = TRUE
;; CopyFilesInCopyList
;; Exit

[Source Media Descriptions]
 1 = "Windows NT Setup Disk #1"
 2 = "3Com 3C589 EtherLink III LAN PC Card Installation Disk"

[ProductType]
STF_PRODUCT = Winnt
STF_PLATFORM = I386

[Files-Inf]
2, OEMSETNT.INF, SIZE=60000,    RENAME=$(!UG_Filename)

[Files-Dll]
2, El3c589.DLL, SIZE=50000

[Files-3nicdiag]
;;2,3nicdiag.exe, SIZE=300000
;;2,3nicdiag.hlp, SIZE=50000
;;2,3varaddr.txt, SIZE=1000
 2,un3c589.exe, SIZE=100000


;;[Files-HwDll]
;;2,hwaccess.dll, SIZE=90000
;;2,pcomdrv.sys, SIZE=9000
;;2,3c589cfg.dll, SIZE=90000

;;[Files-TrayAndCpl]
;;2,comsmd.exe, SIZE=10000

[Files-NDIS3_4]
2,EL589ND4.SYS , SIZE=60000
2,EL589ND3.SYS , SIZE=60000

[LanguagesSupported]
 ENG

[AllFileConstantsENG]
ProCaption = "Windows NT Setup"
ProCancel = "Cancel"
ProCancelMsg = "Windows NT Networking is not correctly installed. "+
 "Are you sure you want to cancel copying files?"
ProCancelCap = "Network Setup Message"
ProText1 = "Copying:"
ProText2 = "To:"
DialogDllName = "El3c589.DLL"

[FileConstantsENG-el3c589]
FunctionTitle           = $(GenericAdapterName)" Setup"$(GenericInfVersion)
ProductSoftwareTitle = $(GenericDriverName)
ProductHardwareTitle = $(GenericAdapterName)
IRQList                 = ^(IRQChoices, 1)
IRQValues               = ^(IRQChoices, 2)
InterruptStyleValues = ^(InterruptStyleChoices, 2)
IOBaseAddrList          = ^(IOBaseAddrChoices, 1)
IOBaseAddrValues                = ^(IOBaseAddrChoices, 2)

[DialogConstantsENG-el3c589]
Help = "&Help"
Exit = "Cancel"
OK = "OK"
HelpContext = ""
Continue = "Continue"
Cancel = "Cancel"

[FileDependentDlgENG-el3c589]
DlgType = "RadioCombination"
DlgTemplate = "el3c589"
Caption = $(FunctionTitle)
HelpContext = $(!IDH_DB_OEMNADE2_INS)
CBOptionsGreyed = {}
NotifyFields = {NO, NO, NO, NO}
Combo1Label = "I/O Port:"
Combo2Label = "Interrupt:"

Combo1List = $(IOBaseAddrList)
Combo1Out = $(IOBaseAddrValue)
Combo2List = $(IRQList)
Combo2Out = $(IRQValue)
ComboListItemsIn = {Combo1List,Combo2List}
ComboListItemsOut = {Combo1Out,Combo2Out}

EditTextIn = {"",""}
EditTextLim = {"",""}

[IRQChoices]
IRQ_1 = "3",3
IRQ_2 = "5",5
IRQ_3 = "7",7
IRQ_4 = "9",9
IRQ_5 = "10",10
IRQ_6 = "11",11
IRQ_7 = "12",12
IRQ_8 = "15",15

[IOBaseAddrChoices]
IOBase_1 = "0x300",768
IOBase_2 = "0x200",512
IOBase_3 = "0x210",528
IOBase_4 = "0x220",544
IOBase_5 = "0x230",560
IOBase_6 = "0x1E0",480
IOBase_7 = "0x250",592
IOBase_8 = "0x260",608
IOBase_9 = "0x270",624
IOBase_10 = "0x280",640
IOBase_11 = "0x290",656
IOBase_12 = "0x2A0",672
IOBase_13 = "0x2B0",688
IOBase_14 = "0x2C0",704
IOBase_15 = "0x2D0",720
IOBase_16 = "0x2E0",736
IOBase_17 = "0x2F0",752
IOBase_18 = "0x310",784
IOBase_19 = "0x320",800
IOBase_20 = "0x330",816
IOBase_21 = "0x340",832
IOBase_22 = "0x350",848
IOBase_23 = "0x360",864
IOBase_24 = "0x370",880
IOBase_25 = "0x380",896
IOBase_26 = "0x390",912
IOBase_27 = "0x3A0",928
IOBase_28 = "0x3B0",944
IOBase_29 = "0x3C0",960
IOBase_30 = "0x3D0",976
IOBase_31 = "0x1F0",496
IOBase_32 = "0x3F0",1008
